/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrderHistoryService } from "../orderHistory.service";
import { OrderHistoryCreateInput } from "./OrderHistoryCreateInput";
import { OrderHistory } from "./OrderHistory";
import { OrderHistoryFindManyArgs } from "./OrderHistoryFindManyArgs";
import { OrderHistoryWhereUniqueInput } from "./OrderHistoryWhereUniqueInput";
import { OrderHistoryUpdateInput } from "./OrderHistoryUpdateInput";

export class OrderHistoryControllerBase {
  constructor(protected readonly service: OrderHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrderHistory })
  async createOrderHistory(
    @common.Body() data: OrderHistoryCreateInput
  ): Promise<OrderHistory> {
    return await this.service.createOrderHistory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OrderHistory] })
  @ApiNestedQuery(OrderHistoryFindManyArgs)
  async orderHistories(
    @common.Req() request: Request
  ): Promise<OrderHistory[]> {
    const args = plainToClass(OrderHistoryFindManyArgs, request.query);
    return this.service.orderHistories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrderHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async orderHistory(
    @common.Param() params: OrderHistoryWhereUniqueInput
  ): Promise<OrderHistory | null> {
    const result = await this.service.orderHistory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrderHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrderHistory(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() data: OrderHistoryUpdateInput
  ): Promise<OrderHistory | null> {
    try {
      return await this.service.updateOrderHistory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrderHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrderHistory(
    @common.Param() params: OrderHistoryWhereUniqueInput
  ): Promise<OrderHistory | null> {
    try {
      return await this.service.deleteOrderHistory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
