/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProductStyle } from "./ProductStyle";
import { ProductStyleCountArgs } from "./ProductStyleCountArgs";
import { ProductStyleFindManyArgs } from "./ProductStyleFindManyArgs";
import { ProductStyleFindUniqueArgs } from "./ProductStyleFindUniqueArgs";
import { DeleteProductStyleArgs } from "./DeleteProductStyleArgs";
import { ProductStyleService } from "../productStyle.service";
@graphql.Resolver(() => ProductStyle)
export class ProductStyleResolverBase {
  constructor(protected readonly service: ProductStyleService) {}

  async _productStylesMeta(
    @graphql.Args() args: ProductStyleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductStyle])
  async productStyles(
    @graphql.Args() args: ProductStyleFindManyArgs
  ): Promise<ProductStyle[]> {
    return this.service.productStyles(args);
  }

  @graphql.Query(() => ProductStyle, { nullable: true })
  async productStyle(
    @graphql.Args() args: ProductStyleFindUniqueArgs
  ): Promise<ProductStyle | null> {
    const result = await this.service.productStyle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductStyle)
  async deleteProductStyle(
    @graphql.Args() args: DeleteProductStyleArgs
  ): Promise<ProductStyle | null> {
    try {
      return await this.service.deleteProductStyle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
