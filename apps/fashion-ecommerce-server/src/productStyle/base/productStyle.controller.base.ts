/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductStyleService } from "../productStyle.service";
import { ProductStyleCreateInput } from "./ProductStyleCreateInput";
import { ProductStyle } from "./ProductStyle";
import { ProductStyleFindManyArgs } from "./ProductStyleFindManyArgs";
import { ProductStyleWhereUniqueInput } from "./ProductStyleWhereUniqueInput";
import { ProductStyleUpdateInput } from "./ProductStyleUpdateInput";

export class ProductStyleControllerBase {
  constructor(protected readonly service: ProductStyleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductStyle })
  async createProductStyle(
    @common.Body() data: ProductStyleCreateInput
  ): Promise<ProductStyle> {
    return await this.service.createProductStyle({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductStyle] })
  @ApiNestedQuery(ProductStyleFindManyArgs)
  async productStyles(@common.Req() request: Request): Promise<ProductStyle[]> {
    const args = plainToClass(ProductStyleFindManyArgs, request.query);
    return this.service.productStyles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductStyle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productStyle(
    @common.Param() params: ProductStyleWhereUniqueInput
  ): Promise<ProductStyle | null> {
    const result = await this.service.productStyle({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductStyle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductStyle(
    @common.Param() params: ProductStyleWhereUniqueInput,
    @common.Body() data: ProductStyleUpdateInput
  ): Promise<ProductStyle | null> {
    try {
      return await this.service.updateProductStyle({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductStyle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductStyle(
    @common.Param() params: ProductStyleWhereUniqueInput
  ): Promise<ProductStyle | null> {
    try {
      return await this.service.deleteProductStyle({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
