/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ProductStyle as PrismaProductStyle } from "@prisma/client";

export class ProductStyleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProductStyleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.productStyle.count(args);
  }

  async productStyles<T extends Prisma.ProductStyleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductStyleFindManyArgs>
  ): Promise<PrismaProductStyle[]> {
    return this.prisma.productStyle.findMany<Prisma.ProductStyleFindManyArgs>(
      args
    );
  }
  async productStyle<T extends Prisma.ProductStyleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductStyleFindUniqueArgs>
  ): Promise<PrismaProductStyle | null> {
    return this.prisma.productStyle.findUnique(args);
  }
  async createProductStyle<T extends Prisma.ProductStyleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductStyleCreateArgs>
  ): Promise<PrismaProductStyle> {
    return this.prisma.productStyle.create<T>(args);
  }
  async updateProductStyle<T extends Prisma.ProductStyleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductStyleUpdateArgs>
  ): Promise<PrismaProductStyle> {
    return this.prisma.productStyle.update<T>(args);
  }
  async deleteProductStyle<T extends Prisma.ProductStyleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductStyleDeleteArgs>
  ): Promise<PrismaProductStyle> {
    return this.prisma.productStyle.delete(args);
  }
}
