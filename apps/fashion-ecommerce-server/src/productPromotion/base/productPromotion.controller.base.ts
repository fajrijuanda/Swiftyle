/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductPromotionService } from "../productPromotion.service";
import { ProductPromotionCreateInput } from "./ProductPromotionCreateInput";
import { ProductPromotion } from "./ProductPromotion";
import { ProductPromotionFindManyArgs } from "./ProductPromotionFindManyArgs";
import { ProductPromotionWhereUniqueInput } from "./ProductPromotionWhereUniqueInput";
import { ProductPromotionUpdateInput } from "./ProductPromotionUpdateInput";

export class ProductPromotionControllerBase {
  constructor(protected readonly service: ProductPromotionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductPromotion })
  async createProductPromotion(
    @common.Body() data: ProductPromotionCreateInput
  ): Promise<ProductPromotion> {
    return await this.service.createProductPromotion({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductPromotion] })
  @ApiNestedQuery(ProductPromotionFindManyArgs)
  async productPromotions(
    @common.Req() request: Request
  ): Promise<ProductPromotion[]> {
    const args = plainToClass(ProductPromotionFindManyArgs, request.query);
    return this.service.productPromotions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductPromotion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productPromotion(
    @common.Param() params: ProductPromotionWhereUniqueInput
  ): Promise<ProductPromotion | null> {
    const result = await this.service.productPromotion({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductPromotion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductPromotion(
    @common.Param() params: ProductPromotionWhereUniqueInput,
    @common.Body() data: ProductPromotionUpdateInput
  ): Promise<ProductPromotion | null> {
    try {
      return await this.service.updateProductPromotion({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductPromotion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductPromotion(
    @common.Param() params: ProductPromotionWhereUniqueInput
  ): Promise<ProductPromotion | null> {
    try {
      return await this.service.deleteProductPromotion({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
