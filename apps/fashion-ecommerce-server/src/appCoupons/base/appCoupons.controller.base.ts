/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AppCouponsService } from "../appCoupons.service";
import { AppCouponsCreateInput } from "./AppCouponsCreateInput";
import { AppCoupons } from "./AppCoupons";
import { AppCouponsFindManyArgs } from "./AppCouponsFindManyArgs";
import { AppCouponsWhereUniqueInput } from "./AppCouponsWhereUniqueInput";
import { AppCouponsUpdateInput } from "./AppCouponsUpdateInput";

export class AppCouponsControllerBase {
  constructor(protected readonly service: AppCouponsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AppCoupons })
  async createAppCoupons(
    @common.Body() data: AppCouponsCreateInput
  ): Promise<AppCoupons> {
    return await this.service.createAppCoupons({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AppCoupons] })
  @ApiNestedQuery(AppCouponsFindManyArgs)
  async appCouponsItems(@common.Req() request: Request): Promise<AppCoupons[]> {
    const args = plainToClass(AppCouponsFindManyArgs, request.query);
    return this.service.appCouponsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AppCoupons })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async appCoupons(
    @common.Param() params: AppCouponsWhereUniqueInput
  ): Promise<AppCoupons | null> {
    const result = await this.service.appCoupons({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AppCoupons })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAppCoupons(
    @common.Param() params: AppCouponsWhereUniqueInput,
    @common.Body() data: AppCouponsUpdateInput
  ): Promise<AppCoupons | null> {
    try {
      return await this.service.updateAppCoupons({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AppCoupons })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAppCoupons(
    @common.Param() params: AppCouponsWhereUniqueInput
  ): Promise<AppCoupons | null> {
    try {
      return await this.service.deleteAppCoupons({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
