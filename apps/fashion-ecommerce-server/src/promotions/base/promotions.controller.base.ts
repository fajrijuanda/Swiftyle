/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PromotionsService } from "../promotions.service";
import { PromotionsCreateInput } from "./PromotionsCreateInput";
import { Promotions } from "./Promotions";
import { PromotionsFindManyArgs } from "./PromotionsFindManyArgs";
import { PromotionsWhereUniqueInput } from "./PromotionsWhereUniqueInput";
import { PromotionsUpdateInput } from "./PromotionsUpdateInput";

export class PromotionsControllerBase {
  constructor(protected readonly service: PromotionsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Promotions })
  async createPromotions(
    @common.Body() data: PromotionsCreateInput
  ): Promise<Promotions> {
    return await this.service.createPromotions({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Promotions] })
  @ApiNestedQuery(PromotionsFindManyArgs)
  async promotionsItems(@common.Req() request: Request): Promise<Promotions[]> {
    const args = plainToClass(PromotionsFindManyArgs, request.query);
    return this.service.promotionsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Promotions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async promotions(
    @common.Param() params: PromotionsWhereUniqueInput
  ): Promise<Promotions | null> {
    const result = await this.service.promotions({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Promotions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePromotions(
    @common.Param() params: PromotionsWhereUniqueInput,
    @common.Body() data: PromotionsUpdateInput
  ): Promise<Promotions | null> {
    try {
      return await this.service.updatePromotions({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Promotions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePromotions(
    @common.Param() params: PromotionsWhereUniqueInput
  ): Promise<Promotions | null> {
    try {
      return await this.service.deletePromotions({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
