/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WishlistItemService } from "../wishlistItem.service";
import { WishlistItemCreateInput } from "./WishlistItemCreateInput";
import { WishlistItem } from "./WishlistItem";
import { WishlistItemFindManyArgs } from "./WishlistItemFindManyArgs";
import { WishlistItemWhereUniqueInput } from "./WishlistItemWhereUniqueInput";
import { WishlistItemUpdateInput } from "./WishlistItemUpdateInput";

export class WishlistItemControllerBase {
  constructor(protected readonly service: WishlistItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WishlistItem })
  async createWishlistItem(
    @common.Body() data: WishlistItemCreateInput
  ): Promise<WishlistItem> {
    return await this.service.createWishlistItem({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WishlistItem] })
  @ApiNestedQuery(WishlistItemFindManyArgs)
  async wishlistItems(@common.Req() request: Request): Promise<WishlistItem[]> {
    const args = plainToClass(WishlistItemFindManyArgs, request.query);
    return this.service.wishlistItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WishlistItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async wishlistItem(
    @common.Param() params: WishlistItemWhereUniqueInput
  ): Promise<WishlistItem | null> {
    const result = await this.service.wishlistItem({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WishlistItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWishlistItem(
    @common.Param() params: WishlistItemWhereUniqueInput,
    @common.Body() data: WishlistItemUpdateInput
  ): Promise<WishlistItem | null> {
    try {
      return await this.service.updateWishlistItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WishlistItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWishlistItem(
    @common.Param() params: WishlistItemWhereUniqueInput
  ): Promise<WishlistItem | null> {
    try {
      return await this.service.deleteWishlistItem({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
