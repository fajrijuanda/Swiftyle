/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RefundRequestService } from "../refundRequest.service";
import { RefundRequestCreateInput } from "./RefundRequestCreateInput";
import { RefundRequest } from "./RefundRequest";
import { RefundRequestFindManyArgs } from "./RefundRequestFindManyArgs";
import { RefundRequestWhereUniqueInput } from "./RefundRequestWhereUniqueInput";
import { RefundRequestUpdateInput } from "./RefundRequestUpdateInput";

export class RefundRequestControllerBase {
  constructor(protected readonly service: RefundRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RefundRequest })
  async createRefundRequest(
    @common.Body() data: RefundRequestCreateInput
  ): Promise<RefundRequest> {
    return await this.service.createRefundRequest({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RefundRequest] })
  @ApiNestedQuery(RefundRequestFindManyArgs)
  async refundRequests(
    @common.Req() request: Request
  ): Promise<RefundRequest[]> {
    const args = plainToClass(RefundRequestFindManyArgs, request.query);
    return this.service.refundRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RefundRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async refundRequest(
    @common.Param() params: RefundRequestWhereUniqueInput
  ): Promise<RefundRequest | null> {
    const result = await this.service.refundRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RefundRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRefundRequest(
    @common.Param() params: RefundRequestWhereUniqueInput,
    @common.Body() data: RefundRequestUpdateInput
  ): Promise<RefundRequest | null> {
    try {
      return await this.service.updateRefundRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RefundRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRefundRequest(
    @common.Param() params: RefundRequestWhereUniqueInput
  ): Promise<RefundRequest | null> {
    try {
      return await this.service.deleteRefundRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
