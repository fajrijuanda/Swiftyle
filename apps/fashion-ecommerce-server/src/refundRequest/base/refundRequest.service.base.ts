/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RefundRequest as PrismaRefundRequest } from "@prisma/client";

export class RefundRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RefundRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.refundRequest.count(args);
  }

  async refundRequests<T extends Prisma.RefundRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefundRequestFindManyArgs>
  ): Promise<PrismaRefundRequest[]> {
    return this.prisma.refundRequest.findMany<Prisma.RefundRequestFindManyArgs>(
      args
    );
  }
  async refundRequest<T extends Prisma.RefundRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefundRequestFindUniqueArgs>
  ): Promise<PrismaRefundRequest | null> {
    return this.prisma.refundRequest.findUnique(args);
  }
  async createRefundRequest<T extends Prisma.RefundRequestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefundRequestCreateArgs>
  ): Promise<PrismaRefundRequest> {
    return this.prisma.refundRequest.create<T>(args);
  }
  async updateRefundRequest<T extends Prisma.RefundRequestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefundRequestUpdateArgs>
  ): Promise<PrismaRefundRequest> {
    return this.prisma.refundRequest.update<T>(args);
  }
  async deleteRefundRequest<T extends Prisma.RefundRequestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RefundRequestDeleteArgs>
  ): Promise<PrismaRefundRequest> {
    return this.prisma.refundRequest.delete(args);
  }
}
