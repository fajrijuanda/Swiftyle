/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PreferencesService } from "../preferences.service";
import { PreferencesCreateInput } from "./PreferencesCreateInput";
import { Preferences } from "./Preferences";
import { PreferencesFindManyArgs } from "./PreferencesFindManyArgs";
import { PreferencesWhereUniqueInput } from "./PreferencesWhereUniqueInput";
import { PreferencesUpdateInput } from "./PreferencesUpdateInput";

export class PreferencesControllerBase {
  constructor(protected readonly service: PreferencesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Preferences })
  async createPreferences(
    @common.Body() data: PreferencesCreateInput
  ): Promise<Preferences> {
    return await this.service.createPreferences({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Preferences] })
  @ApiNestedQuery(PreferencesFindManyArgs)
  async preferencesItems(
    @common.Req() request: Request
  ): Promise<Preferences[]> {
    const args = plainToClass(PreferencesFindManyArgs, request.query);
    return this.service.preferencesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Preferences })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async preferences(
    @common.Param() params: PreferencesWhereUniqueInput
  ): Promise<Preferences | null> {
    const result = await this.service.preferences({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Preferences })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePreferences(
    @common.Param() params: PreferencesWhereUniqueInput,
    @common.Body() data: PreferencesUpdateInput
  ): Promise<Preferences | null> {
    try {
      return await this.service.updatePreferences({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Preferences })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePreferences(
    @common.Param() params: PreferencesWhereUniqueInput
  ): Promise<Preferences | null> {
    try {
      return await this.service.deletePreferences({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
