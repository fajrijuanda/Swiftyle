/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StyleService } from "../style.service";
import { StyleCreateInput } from "./StyleCreateInput";
import { Style } from "./Style";
import { StyleFindManyArgs } from "./StyleFindManyArgs";
import { StyleWhereUniqueInput } from "./StyleWhereUniqueInput";
import { StyleUpdateInput } from "./StyleUpdateInput";

export class StyleControllerBase {
  constructor(protected readonly service: StyleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Style })
  async createStyle(@common.Body() data: StyleCreateInput): Promise<Style> {
    return await this.service.createStyle({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Style] })
  @ApiNestedQuery(StyleFindManyArgs)
  async styles(@common.Req() request: Request): Promise<Style[]> {
    const args = plainToClass(StyleFindManyArgs, request.query);
    return this.service.styles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Style })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async style(
    @common.Param() params: StyleWhereUniqueInput
  ): Promise<Style | null> {
    const result = await this.service.style({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Style })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStyle(
    @common.Param() params: StyleWhereUniqueInput,
    @common.Body() data: StyleUpdateInput
  ): Promise<Style | null> {
    try {
      return await this.service.updateStyle({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Style })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStyle(
    @common.Param() params: StyleWhereUniqueInput
  ): Promise<Style | null> {
    try {
      return await this.service.deleteStyle({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
