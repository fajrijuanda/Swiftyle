/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Style as PrismaStyle } from "@prisma/client";

export class StyleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StyleCountArgs, "select">): Promise<number> {
    return this.prisma.style.count(args);
  }

  async styles<T extends Prisma.StyleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StyleFindManyArgs>
  ): Promise<PrismaStyle[]> {
    return this.prisma.style.findMany<Prisma.StyleFindManyArgs>(args);
  }
  async style<T extends Prisma.StyleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StyleFindUniqueArgs>
  ): Promise<PrismaStyle | null> {
    return this.prisma.style.findUnique(args);
  }
  async createStyle<T extends Prisma.StyleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StyleCreateArgs>
  ): Promise<PrismaStyle> {
    return this.prisma.style.create<T>(args);
  }
  async updateStyle<T extends Prisma.StyleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StyleUpdateArgs>
  ): Promise<PrismaStyle> {
    return this.prisma.style.update<T>(args);
  }
  async deleteStyle<T extends Prisma.StyleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StyleDeleteArgs>
  ): Promise<PrismaStyle> {
    return this.prisma.style.delete(args);
  }
}
