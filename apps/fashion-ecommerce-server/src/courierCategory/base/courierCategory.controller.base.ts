/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CourierCategoryService } from "../courierCategory.service";
import { CourierCategoryCreateInput } from "./CourierCategoryCreateInput";
import { CourierCategory } from "./CourierCategory";
import { CourierCategoryFindManyArgs } from "./CourierCategoryFindManyArgs";
import { CourierCategoryWhereUniqueInput } from "./CourierCategoryWhereUniqueInput";
import { CourierCategoryUpdateInput } from "./CourierCategoryUpdateInput";

export class CourierCategoryControllerBase {
  constructor(protected readonly service: CourierCategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CourierCategory })
  async createCourierCategory(
    @common.Body() data: CourierCategoryCreateInput
  ): Promise<CourierCategory> {
    return await this.service.createCourierCategory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CourierCategory] })
  @ApiNestedQuery(CourierCategoryFindManyArgs)
  async courierCategories(
    @common.Req() request: Request
  ): Promise<CourierCategory[]> {
    const args = plainToClass(CourierCategoryFindManyArgs, request.query);
    return this.service.courierCategories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CourierCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async courierCategory(
    @common.Param() params: CourierCategoryWhereUniqueInput
  ): Promise<CourierCategory | null> {
    const result = await this.service.courierCategory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CourierCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCourierCategory(
    @common.Param() params: CourierCategoryWhereUniqueInput,
    @common.Body() data: CourierCategoryUpdateInput
  ): Promise<CourierCategory | null> {
    try {
      return await this.service.updateCourierCategory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CourierCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCourierCategory(
    @common.Param() params: CourierCategoryWhereUniqueInput
  ): Promise<CourierCategory | null> {
    try {
      return await this.service.deleteCourierCategory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
