/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AddressesService } from "../addresses.service";
import { AddressesCreateInput } from "./AddressesCreateInput";
import { Addresses } from "./Addresses";
import { AddressesFindManyArgs } from "./AddressesFindManyArgs";
import { AddressesWhereUniqueInput } from "./AddressesWhereUniqueInput";
import { AddressesUpdateInput } from "./AddressesUpdateInput";

export class AddressesControllerBase {
  constructor(protected readonly service: AddressesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Addresses })
  async createAddresses(
    @common.Body() data: AddressesCreateInput
  ): Promise<Addresses> {
    return await this.service.createAddresses({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Addresses] })
  @ApiNestedQuery(AddressesFindManyArgs)
  async addressesItems(@common.Req() request: Request): Promise<Addresses[]> {
    const args = plainToClass(AddressesFindManyArgs, request.query);
    return this.service.addressesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Addresses })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async addresses(
    @common.Param() params: AddressesWhereUniqueInput
  ): Promise<Addresses | null> {
    const result = await this.service.addresses({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Addresses })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAddresses(
    @common.Param() params: AddressesWhereUniqueInput,
    @common.Body() data: AddressesUpdateInput
  ): Promise<Addresses | null> {
    try {
      return await this.service.updateAddresses({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Addresses })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAddresses(
    @common.Param() params: AddressesWhereUniqueInput
  ): Promise<Addresses | null> {
    try {
      return await this.service.deleteAddresses({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
