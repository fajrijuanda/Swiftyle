/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Complaints as PrismaComplaints } from "@prisma/client";

export class ComplaintsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ComplaintsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.complaints.count(args);
  }

  async complaintsItems<T extends Prisma.ComplaintsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsFindManyArgs>
  ): Promise<PrismaComplaints[]> {
    return this.prisma.complaints.findMany<Prisma.ComplaintsFindManyArgs>(args);
  }
  async complaints<T extends Prisma.ComplaintsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsFindUniqueArgs>
  ): Promise<PrismaComplaints | null> {
    return this.prisma.complaints.findUnique(args);
  }
  async createComplaints<T extends Prisma.ComplaintsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsCreateArgs>
  ): Promise<PrismaComplaints> {
    return this.prisma.complaints.create<T>(args);
  }
  async updateComplaints<T extends Prisma.ComplaintsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsUpdateArgs>
  ): Promise<PrismaComplaints> {
    return this.prisma.complaints.update<T>(args);
  }
  async deleteComplaints<T extends Prisma.ComplaintsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsDeleteArgs>
  ): Promise<PrismaComplaints> {
    return this.prisma.complaints.delete(args);
  }
}
