/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShopCouponsService } from "../shopCoupons.service";
import { ShopCouponsCreateInput } from "./ShopCouponsCreateInput";
import { ShopCoupons } from "./ShopCoupons";
import { ShopCouponsFindManyArgs } from "./ShopCouponsFindManyArgs";
import { ShopCouponsWhereUniqueInput } from "./ShopCouponsWhereUniqueInput";
import { ShopCouponsUpdateInput } from "./ShopCouponsUpdateInput";

export class ShopCouponsControllerBase {
  constructor(protected readonly service: ShopCouponsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ShopCoupons })
  async createShopCoupons(
    @common.Body() data: ShopCouponsCreateInput
  ): Promise<ShopCoupons> {
    return await this.service.createShopCoupons({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ShopCoupons] })
  @ApiNestedQuery(ShopCouponsFindManyArgs)
  async shopCouponsItems(
    @common.Req() request: Request
  ): Promise<ShopCoupons[]> {
    const args = plainToClass(ShopCouponsFindManyArgs, request.query);
    return this.service.shopCouponsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ShopCoupons })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shopCoupons(
    @common.Param() params: ShopCouponsWhereUniqueInput
  ): Promise<ShopCoupons | null> {
    const result = await this.service.shopCoupons({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ShopCoupons })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShopCoupons(
    @common.Param() params: ShopCouponsWhereUniqueInput,
    @common.Body() data: ShopCouponsUpdateInput
  ): Promise<ShopCoupons | null> {
    try {
      return await this.service.updateShopCoupons({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ShopCoupons })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShopCoupons(
    @common.Param() params: ShopCouponsWhereUniqueInput
  ): Promise<ShopCoupons | null> {
    try {
      return await this.service.deleteShopCoupons({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
